# 假设你的模块名为 dq_mult_extension，你应该根据实际情况调整
from typing import Tuple
import torch

def dq_mult(q1: torch.Tensor, q2: torch.Tensor) -> torch.Tensor: ...
def P(q: torch.Tensor) -> torch.Tensor: ...
def D(q: torch.Tensor) -> torch.Tensor: ...
def Re(q: torch.Tensor) -> torch.Tensor: ...
def Im(q: torch.Tensor) -> torch.Tensor: ...
def conj(q: torch.Tensor) -> torch.Tensor: ...
def norm(q: torch.Tensor) -> torch.Tensor: ...
def translation(q: torch.Tensor) -> torch.Tensor: ...
def rotation_angle(q: torch.Tensor) -> torch.Tensor: ...
def rotation_axis(q: torch.Tensor) -> torch.Tensor: ...
def dq_log(q: torch.Tensor) -> torch.Tensor: ...
def dq_exp(q: torch.Tensor) -> torch.Tensor: ...
def dq_sqrt(q: torch.Tensor) -> torch.Tensor: ...
def dq_inv(q: torch.Tensor) -> torch.Tensor: ...
def dq_normalize(q: torch.Tensor) -> torch.Tensor: ...
def Ad(q1: torch.Tensor, q2: torch.Tensor) -> torch.Tensor: ...
def hamiplus8(q: torch.Tensor) -> torch.Tensor: ...
def haminus8(q: torch.Tensor) -> torch.Tensor: ...
def rel_abs_pose_rel_jac(
    dh1: torch.Tensor, dh2: torch.Tensor, 
    base1: torch.Tensor, base2: torch.Tensor, 
    effector1: torch.Tensor, effector2: torch.Tensor, 
    theta1: torch.Tensor, theta2: torch.Tensor, 
    line_d: torch.Tensor, quat_line_ref: torch.Tensor,
    ith1:int, ith2:int, dh1_type:int, dh2_type:int) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor]: ...
